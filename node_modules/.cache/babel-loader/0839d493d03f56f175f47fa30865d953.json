{"ast":null,"code":"var _jsxFileName = \"/Users/andreracco/Dropbox/MERN.Course/05-forms/src/widgets/forms/formFields.js\";\nimport React from 'react';\n\nvar FormFields = function FormFields(props) {\n  var renderFields = function renderFields() {\n    var formArray = [];\n\n    for (var elementName in props.formData) {\n      formArray.push({\n        id: elementName,\n        setting: props.formData[elementName]\n      });\n    }\n\n    return formArray.map(function (item, i) {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"form_element\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, renderTemplate(item));\n    });\n  };\n\n  var showLabel = function showLabel(show, label) {\n    return show ? React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, label) : null;\n  };\n\n  var changeHandler = function changeHandler(event, id) {\n    var newState = props.formData;\n    newState[id].value = event.target.value;\n    var validData = validate();\n    props.change(newState);\n  };\n\n  var renderTemplate = function renderTemplate(data) {\n    var value = data.setting;\n    var formTemplate = null;\n\n    switch (value.element) {\n      case 'input':\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, showLabel(value.label, value.labelText), React.createElement(\"input\", Object.assign({}, value.config, {\n          value: value.value,\n          onChange: function onChange(event) {\n            return changeHandler(event, data.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        })));\n        break;\n\n      case 'textarea':\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, showLabel(value.label, value.labelText), React.createElement(\"textarea\", Object.assign({}, value.config, {\n          value: value.value,\n          onChange: function onChange(event) {\n            return changeHandler(event, data.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        })));\n        break;\n\n      case 'select':\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, showLabel(value.label, value.labelText), React.createElement(\"select\", {\n          name: value.name,\n          value: value.value,\n          onChange: function onChange(event) {\n            return changeHandler(event, data.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, value.config.options.map(function (item, i) {\n          return React.createElement(\"option\", {\n            key: i,\n            value: item.val,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, item.text);\n        })));\n        break;\n\n      default:\n        formTemplate = null;\n    }\n\n    return formTemplate;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, renderFields());\n};\n\nexport default FormFields;","map":{"version":3,"sources":["/Users/andreracco/Dropbox/MERN.Course/05-forms/src/widgets/forms/formFields.js"],"names":["React","FormFields","props","renderFields","formArray","elementName","formData","push","id","setting","map","item","i","renderTemplate","showLabel","show","label","changeHandler","event","newState","value","target","validData","validate","change","data","formTemplate","element","labelText","config","name","options","val","text"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst FormFields = (props) => {\n\n    const renderFields = () => {\n        const formArray = [];\n\n        for(let elementName in props.formData) {\n            formArray.push({\n                id: elementName,\n                setting: props.formData[elementName]\n            })\n        }\n\n        return formArray.map( (item, i) => {\n            return (\n                <div key={i} className=\"form_element\">\n                    {renderTemplate(item)}\n                </div>\n            )\n        })\n    }\n\n    const showLabel = (show, label) => {\n        return show ? \n            <label>{label}</label>\n            : null\n    }\n\n    const changeHandler = (event, id) => {\n        const newState = props.formData;\n        newState[id].value = event.target.value;\n\n        let validData = validate();\n\n        props.change(newState);\n    }\n\n    const renderTemplate = (data) => {\n\n        let value = data.setting;\n        let formTemplate = null;\n\n        switch(value.element) {\n        case('input'):\n            formTemplate = (\n                <div>\n                    {showLabel(value.label, value.labelText)}\n                    <input {...value.config} \n                        value={value.value}\n                        onChange={\n                            (event) => changeHandler(event, data.id)\n                        }\n                    />\n                </div>\n            )\n            break;\n        case('textarea'):\n            formTemplate = (\n                <div>\n                    {showLabel(value.label, value.labelText)}\n                    <textarea {...value.config}\n                        value={value.value}\n                        onChange={\n                            (event) => changeHandler(event, data.id)\n                        }\n                    />\n                </div>\n            )\n            break;\n        case('select'):\n            formTemplate = (\n                <div>\n                    {showLabel(value.label, value.labelText)}\n                    <select name={value.name} \n                        value={value.value}\n                        onChange={\n                            (event) => changeHandler(event, data.id)\n                        }\n                    >\n                        { value.config.options.map( (item,i) => (\n                            <option key={i} value={item.val}>\n                                {item.text}\n                            </option>\n                        )) }\n                    </select>\n                </div>\n            )\n            break;\n        default:\n            formTemplate = null\n        }\n\n        return formTemplate;\n\n    }\n\n    return (\n        <div>\n            {renderFields()}\n        </div>\n    );\n};\n\nexport default FormFields;"]},"metadata":{},"sourceType":"module"}